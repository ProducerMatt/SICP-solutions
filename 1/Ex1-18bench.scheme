;; [[file:../Answers.org::*Comparison benchmarks:][Comparison benchmarks::1]]
(load "../mattbench.scm")
;; [[[[file:~/SICP-group/Answers.org::fast-mult-iter][fast-mult-iter]]][fast-mult-iter]]
(define (double x)
  (+ x x))
(define (halve x)
  (/ x 2))
(define (fast-mult a b)
  (define (iter a b c)
    (cond ((= b 0) 0)
          ((= b 1) (+ a c))
          ((even? b)
           (iter (double a) (halve b) c))
          (else (iter a (- b 1) (+ a c)))))
  (iter a b 0))
;; fast-mult-iter ends here
;; [[[[file:~/SICP-group/Answers.org::fast-mult-rec][fast-mult-rec]]][fast-mult-rec]]
(define (double x)
  (+ x x))
(define (halve x)
  (/ x 2))
(define (fast-mult-rec a b)
  (cond ((= b 0) 0)
        ((even? b)
         (double (fast-mult-rec a (halve b)))) ; This was kind of a stretch to think of.G
         ;(fast-mult (double a) (halve b))) <== My first instinct is iterative
        (else (+ a (fast-mult-rec a (- b 1))))))
;; fast-mult-rec ends here
;; [[[[file:~/SICP-group/Answers.org::print-table][print-table]]][print-table]]
(use-modules (ice-9 format))
(define* (print-row ll #:key (mode #f))
  (let ((fmtstr
         (cond ((or (eq? mode #f)
                    (equal? mode "display")
                    (equal? mode "~a"))
                " ~a |")    ;; print objects for human viewing
               ((or (eq? mode #t)
                    (equal? mode "write")
                    (equal? mode "~s"))
                " ~s |") ;; print objects for correctly (read)ing back
               ((string? mode)
                mode)))) ;; pass custom format string
      (format #t "~&|")
      (map (位(x) (format #t fmtstr x)) ll)
      (format #t "~%")))
(define* (print-table table #:key (colnames #f) (mode #f))
    (define (iter t)
      (print-row (car t) #:mode mode)
      (if colnames
          (print-row (car t) #:mode "---|"))
      (map (位(x) (print-row x #:mode mode)) (cdr t)))
    (cond ((and (= 1 (length table))
                (list? (car table))) (iter (car table)))
          ((<= 1 (length table)) (iter table))
          (else error "Invalid Input??")))
;; print-table ends here
(print-table (list (list "fast-mult-rec" "fast-mult-iter")
                   (list (mattbench (位() (fast-mult-rec 32 32)) 10000000)
                         (mattbench (位() (fast-mult 32 32)) 10000000)))
             #:colnames #t)
;; Comparison benchmarks::1 ends here
