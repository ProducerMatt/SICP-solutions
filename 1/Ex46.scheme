;; [[file:../Answers.org::*Answer][Answer:4]]
(load "mattcheck2.scm")
;; [[[[file:~/SICP-group/Answers.org::fixed-point-txt][fixed-point-txt]]][fixed-point-txt]]
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
;; fixed-point-txt ends here
;; [[[[file:~/SICP-group/Answers.org::fixed-point-improve][fixed-point-improve]]][fixed-point-improve]]
;; [[[[file:~/SICP-group/Answers.org::iterative-improve][iterative-improve]]][iterative-improve]]
(define (iterative-improve good-enough? improve)
  (define (iter guess)
    (let ((next (improve guess)))
      (if (good-enough? guess next)
          next
          (iter next))))
  iter)
;; iterative-improve ends here
(define tolerance 0.00001)

(define (fixed-point-improve f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) 
       tolerance))
  ((iterative-improve
    close-enough?
    f)
   first-guess))
;; fixed-point-improve ends here
(mattcheck "fixed-point-improve still working"
                 (fixed-point (lambda(x)(+ 1 (/ 1 x))) 1.1)
                 (fixed-point-improve (lambda(x)(+ 1 (/ 1 x))) 1.1))
;; [[[[file:~/SICP-group/Answers.org::sqrt][sqrt]]][sqrt]]
;; [[[[file:~/SICP-group/Answers.org::average][average]]][average]]
(define (average x y)
  (/ (+ x y) 2))
;; average ends here
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? guess x)
   (= (improve guess x) guess))
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
(define (sqrt x)
  (sqrt-iter 1.0 x))
;; sqrt ends here
;; [[[[file:~/SICP-group/Answers.org::sqrt-improve][sqrt-improve]]][sqrt-improve]]
;; [[[[file:~/SICP-group/Answers.org::square][square]]][square]]
(define (square x)
  (* x x))
;; square ends here
;; [[[[file:~/SICP-group/Answers.org::average][average]]][average]]
(define (average x y)
  (/ (+ x y) 2))
;; average ends here
;; [[[[file:~/SICP-group/Answers.org::iterative-improve][iterative-improve]]][iterative-improve]]
(define (iterative-improve good-enough? improve)
  (define (iter guess)
    (let ((next (improve guess)))
      (if (good-enough? guess next)
          next
          (iter next))))
  iter)
;; iterative-improve ends here
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? next x)
  ;;   (= guess next)) ;; no longer works with this method
  (< (abs (- (square next) x)) 0.001))
(define (sqrt-improve x)
  ((iterative-improve
    (lambda(guess next)(good-enough? next x))
    (lambda(guess) (improve guess x)))
   1.0))
;; sqrt-improve ends here
(mattcheck "sqrt-improve still working"
                 (sqrt 5)
                 (sqrt-improve 5))
;; Answer:4 ends here
