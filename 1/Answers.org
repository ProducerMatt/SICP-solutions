#+org-update-heading-mod-times: t
# ^ Automatically updated modification metadata per-section

#+STARTUP: overview
#+auto_tangle: t

# ORG-BABEL DEFAULTS
#+PROPERTY: header-args :tangle no :noeval :exports both :cache yes :results output wrap :noweb no-export :comments noweb :session default
#+PROPERTY: header-args:gnuplot :prelude "reset"
# For the actual answers their dependencies use a header like this:
# #+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports both
# For their dependencies:
# #+BEGIN_SRC scheme :eval no-export :tangle yes :results silent

#+PANDOC_OPTIONS: standalone:t
# FIXME: this doesn't appear to do anything. Be sure to run pandoc with -s

#+LATEX_CMD: xelatex
#+LATEX_HEADER: \setmonofont[Mapping=tex-text,Scale=MatchLowercase]{FiraMono-Regular}
#+LATEX_HEADER: \listfiles
# listfiles causes latex to make a list of all files used during processing

#+title: SICP Chapter 1 Answers
#+AUTHOR: ProducerMatt

* HOW THIS DOCUMENT IS MADE
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:19
:END:
**TODO**
#+NAME: testing
#+BEGIN_SRC scheme -n :exports both :eval no-export :results value
(define (foo a b)
  (+ a (* 2 b)))

(foo 5 3)
#+END_SRC

#+RESULTS[57407d275aacd484646294a75251646c910ae5fc]: testing
:results:
11
:end:

^ Dynamically evaluated when you press "enter" on the ~BEGIN_SRC~ block!

*** Also consider:
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:16
:END:
- ~:results output~ for what the code prints
- ~:exports code~ or ~:exports results~ to just get one or the other

\(a + (\pi \times b)\) <~ inline Latex btw :)

*** Current command for conversion
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:16
:END:
#+BEGIN_SRC sh :noeval
pandoc --from org --to latex 1.org -o 1.tex -s; xelatex 1.tex
#+END_SRC

** Helpers for org-mode tables
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:16
:END:
*** ~try-these~
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:16
:END:
Takes function ~f~ and list ~testvals~ and applies ~f~ to each item ~i~. For
each ~i~ returns a list with ~i~ and the result. Useful dor making tables with a
column for input and a column for output.
#+NAME: try-these
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
;; Surely this could be less nightmarish
(define (try-these f . testvals)
  (let ((l (if (and (= 1 (length testvals))
                    (list? (car testvals)))
               (car testvals)
               testvals)))
    (map (Î» (i) (cons i
                      (cons (if (list? i)
                                (apply f i)
                                (f i))
                            #nil)))
         l)))
#+end_src
*** ~transpose-list~
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:16
:END:
"Rotate" a list, for example from src_scheme{'(1 2 3)} to
src_scheme{'('(1) '(2) '(3))}
#+NAME: transpose-list
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
(define (transpose-list l)
  (map list l))
#+end_src
*** ~print-as-rows~
:PROPERTIES:
:HASH:     191038617830492512
:MODIFIED: 2022-08-23 17:16
:END:
For manually printing items in rows to stdout. Not currently used.
#+NAME: print-as-rows
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
(define (p-nl a)
  (display a)
  (newline))
(define (print-spaced args)
  (let ((a (car args))
        (d (cdr args)))
    (if (null? d)
        (p-nl a)
        (begin (display a)
               (display " ")
               (print-spaced d)))))
(define (print-as-rows . args)
  (let ((a (car args))
        (d (cdr args)))
    (if (list? a)
        (if (= 1 (length args))
            (apply print-as-rows a)
            (print-spaced a))
        (p-nl a))
    (if (null? d)
        '()
        (apply print-as-rows d))))
#+end_src
* Exercise 1.1
:PROPERTIES:
:HASH:     -277441515328139857
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515328139857
:MODIFIED: 2022-08-23 17:19
:END:
Below is a sequence of expressions. What is the result printed by the
interpreter in response to each expression? Assume that the sequence is to be
evaluated in the order in which it is presented.
** Answer
:PROPERTIES:
:HASH:     -277441515328139857
:MODIFIED: 2022-08-23 17:19
:END:
#+BEGIN_SRC scheme -n :results none
10 ;; 10
(+ 5 3 4) ;; 12
(- 9 1) ;; 8
(/ 6 2) ;; 3
(+ (* 2 4) (- 4 6)) ;; 6
(define a 3) ;; a=3
(define b (+ a 1)) ;; b=4
(+ a b (* a b)) ;; 19
(= a b) ;; false
(if (and (> b a) (< b (* a b)))
    b
    a) ;; 4
(cond ((= a 4) 6)
      ((= b 4) (+ 6 7 a))
      (else 25)) ;; 16
(+ 2 (if (> b a) b a)) ;; 6
(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1)) ;; 16
#+END_SRC

* Exercise 1.2
:PROPERTIES:
:HASH:     -277441515328139845
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515328139845
:MODIFIED: 2022-08-23 17:16
:END:
Translate the following expression into prefix form:
\[
  \frac{5 + 2 + (2 - 3 - (6 + \frac{4}{5})))}
            {3(6 - 2)(2 - 7)}
\]
** Answer
:PROPERTIES:
:HASH:     -277441515328139845
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: EX1-2
#+BEGIN_SRC scheme -n :eval no-export :exports both :results value
(/ (+ 5 2 (- 2 3 (+ 6 (/ 4 5))))
   (* 3 (- 6 2) (- 2 7)))
#+END_SRC

#+RESULTS[7039c32447725d91001cae297dc9040b72a855ce]: EX1-2
:results:
1/75
:end:

* Exercise 1.3
:PROPERTIES:
:HASH:     -277441515328139897
:MODIFIED: 2022-08-23 17:16
:END:
** Text
:PROPERTIES:
:HASH:     -277441515328139897
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: square
#+BEGIN_SRC scheme -n :eval no-export :results silent :tangle yes
(define (square x)
  (* x x))
#+END_SRC
** Question
:PROPERTIES:
:HASH:     -277441515328139897
:MODIFIED: 2022-08-23 17:16
:END:
Define a procedure that takes three numbers as arguments and returns the sum of
the squares of the two larger numbers.
** Answer
:PROPERTIES:
:HASH:     -277441515328139897
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: EX1-3
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports both :results value table
<<square>>
(define (sum-square x y)
  (+ (square x) (square y)))
(define (square-2of3 a b c)
  (cond ((and (>= a b) (>= b c)) (sum-square a b))
        ((and (>= a b) (> c b)) (sum-square a c))
        (else (sum-square b c))
#+END_SRC
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<EX1-3>>
<<try-these>>
 (try-these square-2of3 '(7 5 3)
                        '(7 3 5)
                        '(3 5 7))
#+END_SRC

#+RESULTS[0f816cfe3925898754ab7943a28f676135795e6c]:
:results:
| (7 5 3) | 74 |
| (7 3 5) | 74 |
| (3 5 7) | 74 |
:end:

* Exercise 1.4
:PROPERTIES:
:HASH:     -277441515328139885
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515328139885
:MODIFIED: 2022-08-23 17:16
:END:
Observe that our model of evaluation allows for combinations whose operators are
compound expressions. Use this observation to describe the behavior of the
following procedure:

#+NAME: a-plus-abs-b
#+BEGIN_SRC scheme -n
(define (a-plus-abs-b a b)
  ((if (> b 0) + -) a b))
#+END_SRC

** Answer
:PROPERTIES:
:HASH:     -277441515328139885
:MODIFIED: 2022-08-23 17:16
:END:
This code accepts the variables ~a~ and ~b~, and if ~b~ is positive, it adds ~a~
and ~b~. However, if ~b~ is zero or negative, it subtracts them. This decision
is made by using the ~+~ and ~-~ procedures as the results of an if expression,
and then evaluating according to the results of that expression. This is in
contrast to a language like Python, which would do something like this:

#+BEGIN_SRC python :noeval :tangle no
if b > 0: a + b
else: a - b
#+END_SRC

* Exercise 1.5
:PROPERTIES:
:HASH:     -277441515328139777
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515328139777
:MODIFIED: 2022-08-23 17:16
:END:
Ben Bitdiddle has invented a test to determine whether the interpreter he is
faced with is using applicative-order evaluation or normal-order evaluation. He
defines the following two procedures:

#+BEGIN_SRC scheme -n :noeval :tangle no
(define (p) (p))

(define (test x y)
  (if (= x 0)
      0
      y))
#+END_SRC
Then he evaluates the expression

#+BEGIN_SRC scheme -n :noeval :tangle no
(test 0 (p))
#+END_SRC

What behavior will Ben observe with an interpreter that uses applicative-order
evaluation? What behavior will he observe with an interpreter that uses
normal-order evaluation? Explain your answer. (Assume that the evaluation rule
for the special form if is the same whether the interpreter is using normal or
applicative order: The predicate expression is evaluated first, and the result
determines whether to evaluate the consequent or the alternative expression.)

** Answer
:PROPERTIES:
:HASH:     -277441515328139777
:MODIFIED: 2022-08-23 17:16
:END:
In either type of language, src_scheme{(define (p) (p))} is an infinite
loop. However, a normal-order language will encounter the special form, return
~0~, and never evaluate ~(p)~. An applicative-order language evaluates the
arguments to src_scheme{(test 0 (p))}, thus triggering the infinite
loop.

* Exercise 1.6
:PROPERTIES:
:HASH:     -277441515328139797
:MODIFIED: 2022-08-23 17:16
:END:
** Text code
:PROPERTIES:
:HASH:     -277441515328139797
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: abs
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
(define (abs x)
  (if (< x 0)
	  (- x)
	  x))
#+END_SRC
#+NAME: average
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
(define (average x y)
  (/ (+ x y) 2))
#+END_SRC
#+NAME: txt-sqrt
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
<<average>>
(define (improve guess x)
  (average guess (/ x guess)))

<<square>>
<<abs>>
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))
#+END_SRC

** Question
:PROPERTIES:
:HASH:     -277441515328139797
:MODIFIED: 2022-08-23 17:16
:END:
Exercise 1.6: Alyssa P. Hacker doesnât see why if needs to be provided as a
special form. âWhy canât I just define it as an ordinary procedure in terms of
cond?â she asks. Alyssaâs friend Eva Lu Ator claims this can indeed be done, and
she defines a new version of if:

#+BEGIN_SRC scheme -n :noeval :tangle no
(define (new-if predicate
                then-clause
                else-clause)
  (cond (predicate then-clause)
        (else else-clause)))
#+END_SRC
Eva demonstrates the program for Alyssa:

#+BEGIN_SRC scheme -n :noeval :tangle no
(new-if (= 2 3) 0 5)
;; => 5

(new-if (= 1 1) 0 5)
;; => 0
#+END_SRC

Delighted, Alyssa uses new-if to rewrite the square-root program:

#+BEGIN_SRC scheme -n :noeval :tangle no
(define (sqrt-iter guess x)
  (new-if (good-enough? guess x)
          guess
          (sqrt-iter (improve guess x) x)))
#+END_SRC

What happens when Alyssa attempts to use this to compute square roots? Explain.

** Answer
:PROPERTIES:
:HASH:     -277441515328139797
:MODIFIED: 2022-08-23 17:16
:END:
Using Alyssa's ~new-if~ leads to an infinite loop because the recursive call to
~sqrt-iter~ is evaluated before the actual call to ~new-if~. This is because
~if~ and ~cond~ are special forms that change the way evaluation is handled;
whichever branch is chosen leaves the other branches unevaluated.

* Exercise 1.7
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:16
:END:
** Text
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: mean-square
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :results silent
(define (mean-square x y)
  (average (square x) (square y)))
#+END_SRC
** Question
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:16
:END:
The good-enough? test used in computing square roots will not be very effective
for finding the square roots of very small numbers. Also, in real computers,
arithmetic operations are almost always performed with limited precision. This
makes our test inadequate for very large numbers. Explain these statements, with
examples showing how the test fails for small and large numbers. An alternative
strategy for implementing good-enough? is to watch how guess changes from one
iteration to the next and to stop when the change is a very small fraction of
the guess. Design a square-root procedure that uses this kind of end test. Does
this work better for small and large numbers?
** Diary
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:34
:END:
*** Solving
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:34
:END:
My original answer was this, which compares the previous iteration until the new
and old are within an arbitrary \(dx\).

#+NAME: inferior-good-enough
#+BEGIN_SRC scheme -n :tangle no
<<txt-sqrt>>
(define (inferior-good-enough? guess lastguess)
  (<=
   (abs (-
         (/ lastguess guess)
         1))
   0.0000000000001)) ; dx
(define (new-sqrt-iter guess x lastguess) ;; Memory of previous value
  (if (inferior-good-enough? guess lastguess)
      guess
      (new-sqrt-iter (improve guess x) x guess)))
(define (new-sqrt x)
  (new-sqrt-iter 1.0 x 0))
#+end_src

This solution can correctly find small and large numbers:
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value
<<inferior-good-enough>>
(new-sqrt 10000000000000)
#+END_SRC

#+RESULTS[68a129e63924b52600a4964626d31b776d79fed2]:
:results:
3162277.6601683795
:end:

#+NAME: EX1-7-t2
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table drawer
<<try-these>>
<<inferior-good-enough>>
(try-these new-sqrt '(0.01 0.0001 0.000001 0.00000001 0.0000000001))
#+end_src

#+RESULTS[c27aa8604cebcef53580dbfc41f8585b748aacda]: EX1-7-t2
:results:
|   0.01 |                   0.1 |
| 0.0001 |                  0.01 |
|  1e-06 |                 0.001 |
|  1e-08 | 9.999999999999999e-05 |
|  1e-10 | 9.999999999999999e-06 |
:end:


However, I found this solution online that isn't just simpler but automatically
reaches the precision limit of the system:

#+NAME: new-good-enough
#+BEGIN_SRC scheme -n :eval no-export :results silent
<<txt-sqrt>>
(define (best-good-enough? guess x)
   (= (improve guess x) guess))
#+END_SRC

*** Imroving (sqrt) by avoiding extra (improve) call
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:34
:END:
**** Non-optimized
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:34
:END:
#+BEGIN_SRC scheme -n :eval no-export :tangle sqrt-bench.scheme :exports both :results output
(use-modules (ice-9 format))
(load "../mattbench.scm")
(define (average x y)
  (/ (+ x y) 2))
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? guess x)
   (= (improve guess x) guess)) ;; improve call 1
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x))) ;; call 2
(define (sqrt x)
  (sqrt-iter 1.0 x))
(newline)
(display (mattbench (Î»() (sqrt 69420)) 400000000))
(newline)
;; 4731.30 <- Benchmark results
#+end_src

**** Optimized
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:34
:END:
#+BEGIN_SRC scheme -n :noeval :tangle sqrt-bench2.scheme :exports both :results output
(use-modules (ice-9 format))
(load "../mattbench.scm")
(define (average x y)
  (/ (+ x y) 2))
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? guess nextguess x)
  (= nextguess guess))
(define (sqrt-iter guess x)
  (let ((nextguess (improve guess x)))
    (if (good-enough? guess nextguess x)
        guess
        (sqrt-iter nextguess x))))
(define (sqrt x)
  (sqrt-iter 1.0 x))
(newline)
(display (mattbench (Î»() (sqrt 69420)) 400000000))
(newline)
#+end_src
**** Benchmark results
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:34
:END:

| Unoptimized | 4731.30 |
| Optimized   | 2518.44 |

** Answer
:PROPERTIES:
:HASH:     -277441515328139817
:MODIFIED: 2022-08-23 17:16
:END:
The current method has decreasing accuracy with smaller numbers. Notice the
steady divergence from correct answers here (should be decreasing powers of
0.1):
#+NAME: EX1-7-t1
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<txt-sqrt>>
<<try-these>>
(try-these sqrt 0.01 0.0001 0.000001 0.00000001 0.0000000001)
#+END_SRC

#+RESULTS[b2aaaf48d742a7df9331cff3b730a799ad550cfe]: EX1-7-t1
:results:
|   0.01 |  0.10032578510960605 |
| 0.0001 |  0.03230844833048122 |
|  1e-06 | 0.031260655525445276 |
|  1e-08 |  0.03125010656242753 |
|  1e-10 |  0.03125000106562499 |
:end:

And for larger numbers, an infinite loop will eventually be reached. \(10^{12}\)
can resolve, but \(10^{13}\) cannot.

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value
<<txt-sqrt>>
(sqrt 1000000000000)
#+END_SRC

#+RESULTS[452bf3da7286d9fc1e3d621aeb715eafef650536]:
:results:
1000000.0
:end:

So, my definition of ~sqrt~:
#+NAME: sqrt
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports both :results value table
<<average>>
(define (improve guess x)
  (average guess (/ x guess)))
(define (good-enough? guess x)
   (= (improve guess x) guess))
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
(define (sqrt x)
  (sqrt-iter 1.0 x))
#+end_src
#+NAME: EX1-7-t3
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<sqrt>>
(try-these sqrt '(0.01 0.0001 0.000001 0.00000001 0.0000000001))
#+end_src

#+RESULTS[7cb8301b492f578ac407eef3e3378a8d1552a5a3]: EX1-7-t3
:results:
|   0.01 |                   0.1 |
| 0.0001 |                  0.01 |
|  1e-06 |                 0.001 |
|  1e-08 | 9.999999999999999e-05 |
|  1e-10 | 9.999999999999999e-06 |
:end:

* Exercise 1.8
:PROPERTIES:
:HASH:     -277441515328139837
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515328139837
:MODIFIED: 2022-08-23 17:16
:END:
Newtonâs method for cube roots is based on the fact that if y is an
approximation to the cube root of x, then a better approximation is given by the
value:
\begin{equation}
\frac{\frac{x}{y^2} + 2y}{3}
\end{equation}
Use this formula to implement a cube-root procedure analogous to the square-root
procedure. (In 1.3.4 we will see how to implement Newtonâs method in general as
an abstraction of these square-root and cube-root procedures.)
** Diary
:PROPERTIES:
:HASH:     -277441515328139837
:MODIFIED: 2022-08-23 17:16
:END:
My first attempt works, but needs an arbitrary limit to stop infinite loops:
#+NAME: EX1-8-A1
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<square>>
<<try-these>>
(define (cb-good-enough? guess x)
  (= (cb-improve guess x) guess))
(define (cb-improve guess x)
  (/
   (+
    (/ x (square guess))
    (* guess 2))
   3))
(define (cbrt-iter guess x counter)
  (if (or (cb-good-enough? guess x) (> counter 100))
      guess
      (begin
        (cbrt-iter (cb-improve guess x) x (+ 1 counter)))))
(define (cbrt x)
  (cbrt-iter 1.0 x 0))

(try-these cbrt 7 32 56 100)
#+end_src

#+RESULTS[1eb5546cd3e124a63b0cd988f571097371a60813]: EX1-8-A1
:results:
|   7 | 1.912931182772389 |
|  32 | 3.174802103936399 |
|  56 | 3.825862365544778 |
| 100 | 4.641588833612779 |
:end:

However, this will hang on an infinite loop when trying to run src_scheme{(cbrt 100)}.
I speculate it's a floating point precision issue with the "improve"
algorithm. So to avoid it I'll just keep track of the last guess and stop
improving when there's no more change occurring. Also while researching I
discovered that (again due to floating point) src_scheme{(cbrt -2)} loops
forever unless you initialize your guess with a slightly different value, so
let's do 1.1 instead.
** Answer
:PROPERTIES:
:HASH:     -277441515328139837
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: cbrt
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
<<square>>
(define (cb-good-enough? nextguess guess lastguess x)
  (or (= nextguess guess)
      (= nextguess lastguess)))
(define (cb-improve guess x)
  (/
   (+
    (/ x (square guess))
    (* guess 2))
   3))
(define (cbrt-iter guess lastguess x)
  (define nextguess (cb-improve guess x))
  (if (cb-good-enough? nextguess guess lastguess x)
      nextguess
      (cbrt-iter nextguess guess x)))
(define (cbrt x)
  (cbrt-iter 1.1 9999 x))
#+END_SRC
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<cbrt>>
<<try-these>>
(try-these cbrt 7 32 56 100 -2)
#+END_SRC

#+RESULTS[965031d6fc942ec767b94f18bc03219f3a3f93d6]:
:results:
|   7 |   1.912931182772389 |
|  32 |   3.174802103936399 |
|  56 |   3.825862365544778 |
| 100 |   4.641588833612779 |
|  -2 | -1.2599210498948732 |
:end:

* Exercise 1.9
:PROPERTIES:
:HASH:     -277441515328140209
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515328140209
:MODIFIED: 2022-08-23 17:16
:END:
Each of the following two procedures defines a method for adding two positive
integers in terms of the procedures inc, which increments its argument by 1, and
dec, which decrements its argument by 1.

#+BEGIN_SRC scheme -n :noeval :tangle no
(define (+ a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (+ a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))
#+END_SRC

Using the substitution model, illustrate the process generated by each procedure
in evaluating src_scheme{(+ 4 5)}. Are these processes iterative or recursive?
** Answer
:PROPERTIES:
:HASH:     -277441515328140209
:MODIFIED: 2022-08-23 17:16
:END:
The first procedure is recursive, while the second is iterative though
tail-recursion.
*** recursive procedure
:PROPERTIES:
:HASH:     -277441515328140209
:MODIFIED: 2022-08-23 17:16
:END:
#+BEGIN_SRC scheme -n :noeval :tangle no
(+ 4 5)
(inc (+ 3 5))
(inc (inc (+ 2 5)))
(inc (inc (inc (+ 1 5))))
(inc (inc (inc (inc (+ 0 5)))))
(inc (inc (inc (inc 5))))
(inc (inc (inc 6)))
(inc (inc 7))
(inc 8)
9
#+END_SRC

*** iterative procedure
:PROPERTIES:
:HASH:     -277441515328140209
:MODIFIED: 2022-08-23 17:16
:END:
#+BEGIN_SRC scheme -n :noeval :tangle no
(+ 4 5)
(+ 3 6)
(+ 2 7)
(+ 1 8)
(+ 0 9)
9
#+END_SRC

* Exercise 1.10
:PROPERTIES:
:HASH:     -277441515348153693
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515348153693
:MODIFIED: 2022-08-23 17:16
:END:
The following procedure computes a mathematical function called Ackermannâs
function.
#+NAME: ackermann
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (A x y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))
#+END_SRC

What are the values of the following expressions?

#+BEGIN_SRC scheme -n :noeval :tangle no
(A 1 10)
(A 2 4)
(A 3 3)
#+END_SRC
#+BEGIN_SRC scheme -n :eval no-export :exports results :tangle no :results value table
<<try-these>>
<<ackermann>>
(try-these A '(1 10) '(2 4) '(3 3))
#+END_SRC

#+RESULTS[48e58b6029bccdcb0ec0cba4c437572b3b5c2437]:
:results:
| (1 10) |  1024 |
| (2 4)  | 65536 |
| (3 3)  | 65536 |
:end:

#+NAME: EX1-10-defs
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
<<ackermann>>
(define (f n) (A 0 n))
(define (g n) (A 1 n))
(define (h n) (A 2 n))
(define (k n) (* 5 n n))
#+END_SRC

Give concise mathematical definitions for the functions computed by the
procedures ~f~, ~g~, and ~h~ for positive integer values of \(n\). For example,
src_scheme{(k n)} computes \(5n^2\).

** Answer
:PROPERTIES:
:HASH:     -277441515348153693
:MODIFIED: 2022-08-23 17:16
:END:
*** ~f~
:PROPERTIES:
:HASH:     -277441515348153693
:MODIFIED: 2022-08-23 17:16
:END:

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<EX1-10-defs>>
(try-these f 1 2 3 10 15 20)
#+END_SRC

#+RESULTS[d24f130b3c260d786e4cb6a89fa32c320b8c9216]:
:results:
|  1 |  2 |
|  2 |  4 |
|  3 |  6 |
| 10 | 20 |
| 15 | 30 |
| 20 | 40 |
:end:

\[
f(n)=2n
\]
*** ~g~
:PROPERTIES:
:HASH:     -277441515348153693
:MODIFIED: 2022-08-23 17:16
:END:

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<EX1-10-defs>>
(try-these g 1 2 3 4 5 6 7 8)
#+END_SRC

#+RESULTS[2de64054dc56968afee805dc8757b991e4f74d88]:
:results:
| 1 |   2 |
| 2 |   4 |
| 3 |   8 |
| 4 |  16 |
| 5 |  32 |
| 6 |  64 |
| 7 | 128 |
| 8 | 256 |
:end:

\[
g(n)=2^n
\]

*** ~h~
:PROPERTIES:
:HASH:     -277441515348153693
:MODIFIED: 2022-08-23 17:16
:END:

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<EX1-10-defs>>
(try-these h 1 2 3 4)
#+END_SRC

#+RESULTS[b80263a28bd5076f3bfa3f4bae09ec511773e7af]:
:results:
| 1 |     2 |
| 2 |     4 |
| 3 |    16 |
| 4 | 65536 |
:end:

It took a while to figure this one out, just because I didn't know the term.
This is repeated exponentiation. This operation is to exponentiation, what
exponentiation is to multiplication. It's called either /tetration/ or /hyper-4/
and has no formal notation, but two common ways would be these:

\[
h(n)=2 \uparrow\uparrow n
\]
\[
h(n)={}^{n}2
\]

* Exercise 1.11
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
A function \(f\) is defined by the rule that:
\[
f(n)=n \text{ if } n<3
\]
\[
\text{ and }
\]
\[
f(n)=f(n-1)+2f(n-2)+3f(n-3) \text{ if } n \geq 3
\]

Write a procedure that computes \(f\) by means of a recursive process. Write a
procedure that computes \(f\) by means of an iterative process.
** Answer
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
*** Recursive
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: EX1-11-fr
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports code :results silent
(define (fr n)
  (if (< n 3)
      n
      (+      (fr (- n 1))
         (* 2 (fr (- n 2)))
         (* 3 (fr (- n 3))))))
#+END_SRC

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<EX1-11-fr>>
(try-these fr 1 3 5 10)
#+END_SRC

#+RESULTS[d54b80d2fe7a526473762819190f33a520a19fe4]:
:results:
|  1 |    1 |
|  3 |    4 |
|  5 |   25 |
| 10 | 1892 |
:end:

*** Iterative
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
**** Attempt 1
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: EX1-11-fi
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports code :results silent
;; This seems like it could be better
(define (fi n)
  (define (formula l)
    (let ((a (car l))
           (b (cadr l))
           (c (caddr l)))
      (+ a
         (* 2 b)
         (* 3 c))))
  (define (iter l i)
    (if (= i n)
        (car l)
        (iter (cons (formula l) l)
              (+ 1 i))))
  (if (< n 3)
      n
      (iter '(2 1 0) 2)))
#+END_SRC

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<EX1-11-fi>>
(try-these fi 1 3 5 10)
#+END_SRC

#+RESULTS[77f33e30f912c03277beeb8092d92c55abfcc936]:
:results:
|  1 |    1 |
|  3 |    4 |
|  5 |   25 |
| 10 | 1892 |
:end:

It works but it seems wasteful.

**** Attempt 2
:PROPERTIES:
:HASH:     -277441515348153745
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: EX1-11-fi2
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports code :results silent
(define (fi2 n)
  (define (formula a b c)
      (+ a
         (* 2 b)
         (* 3 c)))
  (define (iter a b c i)
    (if (= i n)
        a
        (iter (formula a b c)
              a
              b
              (+ 1 i))))
  (if (< n 3)
      n
      (iter 2 1 0 2)))
#+END_SRC

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<EX1-11-fi2>>
(try-these fi2 1 3 5 10)
#+END_SRC

#+RESULTS[baa8cd23dfff7b5fa47ae133b0a8b58ef2cb9a61]:
:results:
|  1 |    1 |
|  3 |    4 |
|  5 |   25 |
| 10 | 1892 |
:end:

I like that better.

* Exercise 1.12
:PROPERTIES:
:HASH:     -277441515348153733
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515348153733
:MODIFIED: 2022-08-23 17:16
:END:
The following pattern of numbers is called Pascalâs triangle.

/Pretend there's a Pascal's triangle here./

The numbers at the edge of the triangle are all 1, and each number inside the
triangle is the sum of the two numbers above it. Write a procedure that
computes elements of Pascalâs triangle by means of a recursive process.
** Answer
:PROPERTIES:
:HASH:     -277441515348153733
:MODIFIED: 2022-08-23 17:16
:END:
I guess I'll rotate the triangle 45 degrees to make it the top-left corner of an
infinite spreadsheet.

#+NAME: pascal-rec
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (pascal x y)
  (if (or (= x 0)
          (= y 0))
      1
      (+ (pascal (- x 1) y)
         (pascal x (- y 1)))))
#+END_SRC

#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
<<try-these>>
<<pascal-rec>>
(let ((l (iota 8)))
  (map (Î» (row)
         (map (Î» (xy)
                (apply pascal xy))
              row))
       (map (Î» (x)
              (map (Î» (y)
                     (list x y))
                   l))
            l)))
#+END_SRC

#+RESULTS[151500842c6cdef9252eaf15c1323fc7bcba0527]:
:results:
| 1 | 1 |  1 |   1 |   1 |   1 |    1 |    1 |
| 1 | 2 |  3 |   4 |   5 |   6 |    7 |    8 |
| 1 | 3 |  6 |  10 |  15 |  21 |   28 |   36 |
| 1 | 4 | 10 |  20 |  35 |  56 |   84 |  120 |
| 1 | 5 | 15 |  35 |  70 | 126 |  210 |  330 |
| 1 | 6 | 21 |  56 | 126 | 252 |  462 |  792 |
| 1 | 7 | 28 |  84 | 210 | 462 |  924 | 1716 |
| 1 | 8 | 36 | 120 | 330 | 792 | 1716 | 3432 |
:end:

The test code was much harder to write than the actual solution.

* Exercise 1.13
:PROPERTIES:
:HASH:     -277441515348153785
:MODIFIED: 2022-08-23 17:16
:END:
** Question
:PROPERTIES:
:HASH:     -277441515348153785
:MODIFIED: 2022-08-23 17:16
:END:
Prove that \(\text{Fib}(n)\) is the closest integer to
\(\frac{Ï^n}{\sqrt{5}}\) where Phi is \(\frac{1 + \sqrt{5}}{2}\). Hint: let
\(Î¥ = \frac{1 - \sqrt{5}}{2}\). Use induction and the definition of the
Fibonacci numbers to prove that

\[
 \text{Fib}(n) = \frac{Ï^n - Î¥^n}{\sqrt{5}}
\]

** Answer
:PROPERTIES:
:HASH:     -277441515348153785
:MODIFIED: 2022-08-23 17:16
:END:
I don't know how to write a proof yet, but I can make functions to
demonstrate it.

*** Fibonacci number generator
:PROPERTIES:
:HASH:     -277441515348153785
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: fib-iter
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (fib-iter n)
  (define (iter i a b)
    (if (= i n)
        b
    (iter (+ i 1)
          b
          (+ a b))))
  (if (<= n 2)
      1
      (iter 2 1 1)))
#+END_SRC
*** Various algorithms relating to the question
:PROPERTIES:
:HASH:     -277441515348153785
:MODIFIED: 2022-08-23 17:16
:END:
#+NAME: fib-phi
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
<<sqrt>>
(define sqrt5
  (sqrt 5))
(define phi
  (/ (+ 1 sqrt5) 2))
(define upsilon
  (/ (- 1 sqrt5) 2))
(define (fib-phi n)
  (/ (- (expt phi n)
        (expt upsilon n))
     sqrt5))
#+END_SRC
#+NAME: 1-13-tab
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value table
(use-srfis '(1))
<<fib-iter>>
<<fib-phi>>
<<try-these>>

(let* ((vals (drop (iota 21) 10))
       (fibs (map fib-iter vals))
       (approx (map fib-phi vals)))
  (zip vals fibs approx))
#+END_SRC

#+RESULTS[732483d41040c13f1e9a125ebe5a0ecdca1f5d18]: 1-13-tab
:results:
| 10 |   55 |  54.99999999999999 |
| 11 |   89 |               89.0 |
| 12 |  144 | 143.99999999999997 |
| 13 |  233 | 232.99999999999994 |
| 14 |  377 | 377.00000000000006 |
| 15 |  610 |              610.0 |
| 16 |  987 |  986.9999999999998 |
| 17 | 1597 | 1596.9999999999998 |
| 18 | 2584 |             2584.0 |
| 19 | 4181 |             4181.0 |
| 20 | 6765 |  6764.999999999999 |
:end:

You can see they follow closely. Graphing the differences, it's just
an exponential curve at very low values, presumably following the
exponential increase of the Fibonacci sequence itself.
#+NAME: 1-13-tab2
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports none :results value silent
(use-srfis '(1))
<<fib-iter>>
<<fib-phi>>
<<try-these>>

(let* ((vals (drop (iota 500) 2))
       (diffs (map (Î» (i)
                     (- (fib-iter i) (fib-phi i)))
                   vals)))
  (zip vals diffs))
#+END_SRC



#+begin_src gnuplot :var data=1-13-tab2 :file fig/1-13.png :exports results :eval no-export
reset # helps with various issues in execution
set xlabel 'values of n'
set logscale y

plot data using 1:2 with lines title 'Fib(n) minus Fib-phi(n)'
#+end_src

#+RESULTS[8c0a67c9f76a9da9c115187192a6c35899c939cb]:
:results:
[[file:fig/1-13.png]]
:end:

* Exercise 1.14
:PROPERTIES:
:HASH:     648599674905962762
:MODIFIED: 2022-08-23 17:16
:END:
Below is the default version of the count-change function. I'll be aggressively
modifying it in order to get a graph out of it.
#+NAME: count-change
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (count-change amount)
  (cc amount 5))

(define (cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0)
             (= kinds-of-coins 0))
         0)
        (else
         (+ (cc amount (- kinds-of-coins 1))
            (cc (- amount (first-denomination
                           kinds-of-coins))
                kinds-of-coins)))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
#+end_src
** Question
:PROPERTIES:
:HASH:     648599674905962762
:MODIFIED: 2022-08-23 17:16
:END:
Draw the tree illustrating the process generated by the count-change procedure
of 1.2.2 in making change for 11 cents.
** Answer
:PROPERTIES:
:HASH:     648599674905962762
:MODIFIED: 2022-08-23 17:16
:END:
I want to generate this graph algorithmically.
#+NAME: count-change-graphviz
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
;; cursed global
(define bubblecounter 0)
;; Returns # of ways change can be made
;; "Helper" for (cc)
(define (count-change amount)
  (display "digraph {\n") ;; start graph
  (cc amount 5 0)
  (display "}\n") ;; end graph
  (set! bubblecounter 0))

;; GraphViz output
;; Derivative: https://stackoverflow.com/a/14806144
(define (cc amount kinds-of-coins oldbubble)
  (let ((recur (lambda (new-amount new-kinds)
                 (begin
                   (display "\"") ;; Source bubble
                   (display `(,oldbubble ,amount ,kinds-of-coins))
                   (display "\"")
                   (display " -> ") ;; arrow pointing from parent to child
                   (display "\"") ;; child bubble
                   (display `(,bubblecounter ,new-amount ,new-kinds))
                   (display "\"")
                   (display "\n")
                   (cc new-amount new-kinds bubblecounter)))))
    (set! bubblecounter (+ bubblecounter 1))
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else (+
                 (recur amount (- kinds-of-coins 1))
                 (recur (- amount
                           (first-denomination kinds-of-coins))
                        kinds-of-coins))))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
#+end_src

I'm not going to include the full printout of the ~(count-change 11)~, here's an example of what this looks like via ~1~.
#+NAME: count-change-test
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results output code
<<count-change-graphviz>>
(count-change 1)
#+end_src

#+RESULTS[626488f89e622bb93d8813545c83ec8fe4c1254c]: count-change-test
#+begin_src dot
digraph {
"(0 1 5)" -> "(1 1 4)"
"(1 1 4)" -> "(2 1 3)"
"(2 1 3)" -> "(3 1 2)"
"(3 1 2)" -> "(4 1 1)"
"(4 1 1)" -> "(5 1 0)"
"(4 1 1)" -> "(6 0 1)"
"(3 1 2)" -> "(7 -4 2)"
"(2 1 3)" -> "(8 -9 3)"
"(1 1 4)" -> "(9 -24 4)"
"(0 1 5)" -> "(10 -49 5)"
}
#+end_src

#+BEGIN_SRC dot :file fig/cc-test.png :exports results :var data=count-change-test :eval no-export
$data
#+end_src

#+RESULTS[2f9cd2c1031a74ba1f68d4d2a7602c619a798efd]:
:results:
[[file:fig/cc-test.png]]
:end:

So, the graph of ~(count-change 11)~ is:
#+NAME: count-change-11
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports none :results silent output
<<count-change-graphviz>>
(count-change 11)
#+end_src

#+BEGIN_SRC dot :file fig/cc-11.png :exports results :var data=count-change-11 :eval no-export
$data
#+end_src

#+RESULTS[914f8aa869c783656d6a64eb7535f44d22158d20]:
:results:
[[file:fig/cc-11.png]]
:end:

** Question 2
:PROPERTIES:
:HASH:     648599674905962762
:MODIFIED: 2022-08-23 17:16
:END:
What are the orders of growth of the space and number of steps used by this
process as the amount to be changed increases?

** Answer 2
:PROPERTIES:
:HASH:     648599674905962762
:MODIFIED: 2022-08-23 17:16
:END:
Let's look at this via the number of function calls needed for value ~n~. Instead
of returning an integer, I'll return a pair where ~car~ is the number of ways to
count change, and ~cdr~ is the number of function calls that have occurred down
that branch of the tree.

#+NAME: cc-calls
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (count-calls amount)
  (cc-calls amount 5))

(define (cc-calls amount kinds-of-coins)
  (cond ((= amount 0) '(1 . 1))
        ((or (< amount 0)
             (= kinds-of-coins 0))
         '(0 . 1))
        (else
         (let ((a (cc-calls amount (- kinds-of-coins 1)))
               (b (cc-calls (- amount (first-denomination
                                 kinds-of-coins))
                      kinds-of-coins)))
           (cons (+ (car a)
                    (car b))
                 (+ 1
                    (cdr a)
                    (cdr b)))))))

(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))
#+end_src


#+NAME: cc-calls-check
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports none :results value table
;; Test to verify that this function is working as expected.
(use-srfis '(1))
<<count-change>>
<<cc-calls>>
(let* ((vals (drop (iota 11) 1))
       (textbook (map count-change vals))
       (mine (map count-calls vals)))
  (zip vals textbook mine))
#+end_src

#+RESULTS[b7476dc844e2456ebb48c7e96462fe180d60101b]: cc-calls-check
:results:
|  1 | 1 | (1 . 11) |
|  2 | 1 | (1 . 13) |
|  3 | 1 | (1 . 15) |
|  4 | 1 | (1 . 17) |
|  5 | 2 | (2 . 19) |
|  6 | 2 | (2 . 25) |
|  7 | 2 | (2 . 29) |
|  8 | 2 | (2 . 33) |
|  9 | 2 | (2 . 37) |
| 10 | 4 | (4 . 41) |
:end:

#+NAME: cc-calls-100
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports code :results silent value table
(use-srfis '(1))
<<cc-calls>>
(let* ((vals (drop (iota 101) 1))
       (mine (map count-calls vals)))
  (zip vals (map car mine) (map cdr mine)))
#+end_src

#+begin_src gnuplot :var data=cc-calls-100 :file fig/cc-100.png :exports results :eval no-export
reset # helps with various issues in execution
set key top left
set logscale y
set xlabel 'values of n'

plot data using 1:2 with lp title 'Ways to make change for n', \
     data using 1:3 with lp title 'function calls'
#+end_src

#+RESULTS[134cbc95d12b4367d5be943722725cd0baca1d87]:
:results:
[[file:fig/cc-100.png]]
:end:

I believe the space to be \(\Theta(n+d)\) as the function calls count down the
denominations before counting down the change. However I notice most answers
describe \(\Theta(n)\) instead, maybe I'm being overly pedantic and getting the
wrong answer.

My issues came finding the time. The book describes the meaning and properties
of \(\Theta\) notation in [[http://sarabander.github.io/sicp/html/1_002e2.xhtml#g_t1_002e2_002e3][Section 1.2.3]]. However, my lack of formal math
education made realizing the significance of this passage difficult. For one, I
didn't understand that \(k_{1}f(n) \leq R(n) \leq k_{2}f(n)\) means "you can
find the \(\Theta\) by proving that a graph of the algorithm's resource usage is
bounded by two identical functions multiplied by constants." So, the graph of
resource usage for an algorithm with \(\Theta(n^{2})\) will by bounded by lines
of \(n^{2} \times some constant\), the top boundary's constant being larger than
the small boundary. These are arbitrarily chosen constants, you're just proving
that the function behaves the way you think it does.

Overall, finding the \(\Theta\) and \(\Omega\) and \(O\) notations (they are all
different btw!) is about aggressively simplifying to make a very general
statement about the behavior of the algorithm.

I could tell that a "correct" way to find the \(\Theta\) would be to make a
formula which describes the algorithm's function calls for given input and
denominations. This is one of the biggest time sinks, although I had a lot of
fun and learned a lot. In the end, with some help from Jach in a Lisp Discord, I
had the following formula:

\[
\sum_{i=1}^{ceil(n / val(d))} T(n - val(d)*i, d)
\]

But I wasn't sure where to go from here. The graphs let me see some interesting
trends, though I didn't get any closer to an answer in the process.

By reading on other websites, I knew that you could find \(\Theta\) by obtaining
a formula for \(R(n)\) and removing constants to end up with a term of interest.
For example, if your algorithm's resource usage is \(\frac{n^{2} + 7n}{5}\),
this demonstrates \(\Theta(n^{2})\). So I know a formula *without* a \(\sum\)
would give me the answer I wanted. It didn't occur to me that it might be
possible to use calculus to remove the \(\sum\) from the equation. At this point
I knew I was stuck and decided to look up a guide.

After seeing a few solutions that I found somewhat confusing, I landed on [[https://codology.net/post/sicp-solution-exercise-1-14/][this
awesome article from Codology.net]]. They show how you can remove the summation,
and proposed this equation for count-change with 5 denominations:

\[
T(n,5)=\frac n{50}+1+\sum_{i=0}^{n/50}T(n-50i,1)
\]

Which, when expanded and simplified, demonstrates \(\Theta(n^{5})\) for 5
denominations.

Overall I'm relieved that I wasn't entirely off, given I haven't done math work
like this since college. It's inspired me to restart my remedial math courses, I
don't think I really grasped the nature of math as a tool of empowerment until
now.

* Exercise 1.15
:PROPERTIES:
:HASH:     -277441515348153793
:MODIFIED: 2022-08-23 17:16
:END:
** Question 1
:PROPERTIES:
:HASH:     -277441515348153793
:MODIFIED: 2022-08-23 17:34
:END:
The sine of an angle (specified in radians) can be computed by making use of the
approximation \(\sin x â x\) if \(x\) is sufficiently small, and the
trigonometric identity \(\sin x = 3\sin\frac{x}{3} â 4\sin^3\frac{x}{3}\)
to reduce the size of the argument of sin. (For purposes of this exercise an
angle is considered âsufficiently smallâ if its magnitude is not greater than
0.1 radians.) These ideas are incorporated in the following procedures:

#+NAME: 1-15-deps
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      angle
      (p (sine (/ angle 3.0)))))
#+end_src

How many times is the procedure ~p~ applied when src_scheme{(sine 12.15)} is evaluated?

** Answer 1
:PROPERTIES:
:HASH:     -277441515348153793
:MODIFIED: 2022-08-23 17:34
:END:

Let's find out!
#+NAME: 1-15-p-measure
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (cube x) (* x x x))
(define (p x) (- (* 3 x) (* 4 (cube x))))
(define (sine angle)
  (if (not (> (abs angle) 0.1))
      (cons angle 0)
      (let ((x (sine (/ angle 3.0))))
        (cons (p (car x)) (+ 1 (cdr x))))))
#+end_src

#+NAME: 1-15-sine1215
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results value
<<1-15-p-measure>>
(let ((xy (sine 12.15)))
  (list (car xy) (cdr xy)))
#+end_src

#+RESULTS[a951cb0c1f0af6041c8ea65b70c08abec9d7fd95]: 1-15-sine1215
:results:
| -0.39980345741334 | 5 |
:end:

~p~ is evaluated 5 times.

** Question 2
:PROPERTIES:
:HASH:     -277441515348153793
:MODIFIED: 2022-08-23 17:34
:END:
What is the order of growth in space and number of steps (as a function of ~a~)
used by the process generated by the sine procedure when src_scheme{(sine a)} is
evaluated?

** Answer 2
:PROPERTIES:
:HASH:     -277441515348153793
:MODIFIED: 2022-08-23 17:34
:END:
#+NAME: 1-15-tab1
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports both :results silent value table
(use-srfis '(1))
<<1-15-p-measure>>
(let* ((vals (iota 300 0.1 0.1))
       (sines (map (Î» (i)
                     (cdr (sine i)))
                   vals)))
  (zip vals sines))
#+end_src
#+end_src
#+NAME: 1-15-tab1-test
#+BEGIN_SRC scheme -n :eval no-export :tangle no :exports result :results value table
(use-srfis '(1))
<<1-15-p-measure>>
(let* ((vals (iota 10 0.1 0.1))
       (sines (map (Î» (i)
                     (cdr (sine i)))
                   vals)))
  (zip vals sines))
#+end_src

Example output:
#+RESULTS[fb3135304f5470edbe145abf5ad93ef8829e4e8c]: 1-15-tab1-test
:results:
|                 0.1 | 0 |
|                 0.2 | 1 |
| 0.30000000000000004 | 2 |
|                 0.4 | 2 |
|                 0.5 | 2 |
|                 0.6 | 2 |
|  0.7000000000000001 | 2 |
|                 0.8 | 2 |
|                 0.9 | 2 |
|                 1.0 | 3 |
:end:
#+BEGIN_COMMENT
#+NAME: 1-15-smoothfill
#+begin_src gnuplot :var data=1-15-tab1 :file fig/1-15-smoothfill.png :exports none :eval no-export
# This graph has a cool filled difference, but unfortunately I can't do
# steps with it, so it's disabled. :(
reset # helps with various issues in execution
set xlabel 'values of x'
set logscale x
set key top left
set style fill solid 1.00 border
set style function fillsteps below y

f(x) = log(x) + 2.3

plot data using 1:2:(f($1)) with filledcurves title 'function calls', \
     data using 1:(f($1)) with lines title 'log(x) + 2.3'
#+end_src

#+RESULTS[cda98404343075e48a2b594fa5d2b60803f911d3]: 1-15-smoothfill
:results:
[[file:fig/1-15-smoothfill.png]]
:end:
#+END_COMMENT

#+begin_src gnuplot :var data=1-15-tab1 :file fig/1-15-step.png :exports both :eval no-export
reset # helps with various issues in execution
set xlabel 'values of x'
set logscale x
set key top left
set style fill solid 1.00 border
set style function fillsteps below

f(x) = log(x) + 2.3

plot data using 1:2 with fillsteps title 'function calls', \
     data using 1:(f($1)) with lines title 'log(x) + 2. 3'
#+end_src

#+RESULTS[460dc2cffdff776bf4e3a46cb26ac66180108b4a]:
:results:
[[file:fig/1-15-step.png]]
:end:

This graph shows that the number of times ~sine~ will be called is logarithmic.
- 0.1 to 0.2 are divided once
- 0.3 to 0.8 are divided twice
- 0.9 to 2.6 are divided three times
- 2.7 to 8 are divided four times
- 8.5 to 23.8 are divided five times

Given that the calls to ~p~ get stacked recursively, like this:
#+BEGIN_SRC scheme :noeval :exports code
(sine 12.15)
(p (sine 4.05))
(p (p (sine 1.35)))
(p (p (p (sine 0.45))))
(p (p (p (p (sine 0.15)))))
(p (p (p (p (p (sine 0.05))))))
(p (p (p (p (p 0.05)))))
(p (p (p (p 0.14950000000000002))))
(p (p (p 0.43513455050000005)))
(p (p 0.9758465331678772))
(p -0.7895631144708228)
-0.39980345741334
#+END_SRC

So I argue the space and time is \(\Theta(\log(n))\)


We can also prove this for the time by benchmarking the function:

#+NAME: 1-15-sine-bench
#+BEGIN_SRC scheme -n :noeval :tangle "Ex15/sine-bench.scheme" :exports code :results none
;; This execution takes too long for org-mode, so I'm doing it
;; externally and importing the results
(use-srfis '(1))
(use-modules (ice-9 format))
(load "../../mattbench.scm")
<<1-15-deps>>
(let* ((vals (iota 300 0.1 0.1))
       (times (map (Î» (i)
                     (mattbench (Î» () (sine i)) 1000000))
                   vals)))
  (with-output-to-file "sine-bench.dat" (Î» ()
     (map (Î» (x y)
           (format #t "~s~/~s~%" x y))
         vals times))))
#+END_SRC

#+begin_src gnuplot :file fig/1-15-bench.png :exports both :eval no-export
reset # helps with various issues in execution
set xtics 0.5
set xlabel 'values of x'
set logscale x
set key top left
set style fill solid 1.00 border
#set style function fillsteps below

f(x) = (log(x) * a) + b
fit f(x) 'Ex15/sine-bench.dat' using 1:2 via a,b

plot 'Ex15/sine-bench.dat' using 1:2 with fillsteps title 'time to execute', \
     'Ex15/sine-bench.dat' using 1:(f($1)) with lines title sprintf('(log(x) * %.2f) + %.2f', a, b)
#+end_src

#+RESULTS[fb7f0aefd66103c1d2a3d67706e4323de589c4f9]:
:results:
[[file:fig/1-15-bench.png]]
:end:

* Exercise 1.16
:PROPERTIES:
:HASH:     -277441515348153813
:MODIFIED: 2022-08-23 17:16
:END:
** Text
#+NAME: txt-expt
#+BEGIN_SRC scheme -n :eval no-export :tangle yes :exports code :results silent
(define (expt-rec b n)
  (if (= n 0) 
      1 
      (* b (expt-rec b (- n 1)))))

(define (expt-iter b n) 
  (define (iter counter product)
    (if (= counter 0)
        product
        (iter (- counter 1)
              (* b product))))
  (iter n 1))

(define (fast-expt b n)
  (cond ((= n 0) 
         1)
        ((even? n) 
         (square (fast-expt b (/ n 2))))
        (else 
         (* b (fast-expt b (- n 1))))))
#+end_src
** Question
:PROPERTIES:
:HASH:     -277441515348153813
:MODIFIED: 2022-08-23 17:16
:END:
Design a procedure that evolves an iterative exponentiation process that uses
successive squaring and uses a logarithmic number of steps, as does fast-expt.
(Hint: Using the observation that \((b^{n/2})^2=(b^2)^{n/2}\), keep, along with
the exponent \(n\) and the base \(b\), an additional state variable \(a\) , and
define the state transformation in such a way that the product \({ab}^n\) is
unchanged from state to state. At the beginning of the process \(a\) is taken to
be 1, and the answer is given by the value of \(a\) at the end of the process.
In general, the technique of defining an /invariant quantity/ that remains
unchanged from state to state is a powerful way to think about the design of
iterative algorithms.)
