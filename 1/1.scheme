;; [[file:1.org::transpose-list][transpose-list]]
(define (transpose-list l)
  (map (Î» (i) (list i)) l))
;; transpose-list ends here

;; [[file:1.org::print-as-rows][print-as-rows]]
(define (p-nl a)
  (display a)
  (newline))
(define (print-spaced args)
  (let ((a (car args))
        (d (cdr args)))
    (if (null? d)
        (p-nl a)
        (begin (display a)
               (display " ")
               (print-spaced d)))))
(define (print-as-rows . args)
  (let ((a (car args))
        (d (cdr args)))
    (if (list? a)
        (if (= 1 (length args))
            (apply print-as-rows a)
            (print-spaced a))
        (p-nl a))
    (if (null? d)
        '()
        (apply print-as-rows d))))
;; print-as-rows ends here

;; [[file:1.org::square][square]]
(define (square x)
  (* x x))
;; square ends here

;; [[file:1.org::EX1-3][EX1-3]]
;; [[[[file:~/SICP-group/1/1.org::square][square]]][square]]
(define (square x)
  (* x x))
;; square ends here
(define (sum-square x y)
  (+ (square x) (square y)))
(define (square-2of3 a b c)
  (cond ((and (>= a b) (>= b c)) (sum-square a b))
        ((and (>= a b) (> c b)) (sum-square a c))
        ((and (> b a) (>= c a)) (sum-square b c))
        (else "This shouldn't happen")))

(display
 (list (square-2of3 7 5 3)
       (square-2of3 7 3 5)
       (square-2of3 3 5 7)))
;; EX1-3 ends here

;; [[file:1.org::abs][abs]]
(define (abs x)
  (if (< x 0)
	  (- x)
	  x))
;; abs ends here

;; [[file:1.org::average][average]]
(define (average x y)
  (/ (+ x y) 2))
;; average ends here

;; [[file:1.org::txt-sqrt][txt-sqrt]]
;; [[[[file:~/SICP-group/1/1.org::average][average]]][average]]
(define (average x y)
  (/ (+ x y) 2))
;; average ends here
(define (improve guess x)
  (average guess (/ x guess)))

;; [[[[file:~/SICP-group/1/1.org::txt-sqrt][txt-sqrt]]][square]]
(define (square x)
  (* x x))
;; square ends here
;; [[[[file:~/SICP-group/1/1.org::abs][abs]]][abs]]
(define (abs x)
  (if (< x 0)
	  (- x)
	  x))
;; abs ends here
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))
;; txt-sqrt ends here

;; [[file:1.org::mean-square][mean-square]]
(define (mean-square x y)
  (average (square x) (square y)))
;; mean-square ends here

;; [[file:1.org::inferior-good-enough][inferior-good-enough]]
;; [[[[file:~/SICP-group/1/1.org::txt-sqrt][txt-sqrt]]][txt-sqrt]]
;; [[[[file:~/SICP-group/1/1.org::txt-sqrt][txt-sqrt]]][average]]
(define (average x y)
  (/ (+ x y) 2))
;; average ends here
(define (improve guess x)
  (average guess (/ x guess)))

;; [[[[file:~/SICP-group/1/1.org::txt-sqrt][txt-sqrt]]][square]]
(define (square x)
  (* x x))
;; square ends here
;; [[[[file:~/SICP-group/1/1.org::txt-sqrt][txt-sqrt]]][abs]]
(define (abs x)
  (if (< x 0)
	  (- x)
	  x))
;; abs ends here
(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.001))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))

(define (sqrt x)
  (sqrt-iter 1.0 x))
;; txt-sqrt ends here
(define (inferior-good-enough? guess lastguess)
  (<=
   (abs (-
         (/ lastguess guess)
         1))
   0.0000000000001)) ; dx
(define (new-sqrt-iter guess x lastguess) ;; Memory of previous value
  (if (inferior-good-enough? guess lastguess)
      guess
      (new-sqrt-iter (improve guess x) x guess)))
(define (new-sqrt x)
  (new-sqrt-iter 1.0 x 0))
;; inferior-good-enough ends here
