;; [[file:../Answers.org::findsomeprimes][findsomeprimes]]
;; [[[[file:~/SICP-group/1/Answers.org::findsomeprimes][findsomeprimes]]][find-divisor-faster-real]]
;; [[[[file:~/SICP-group/1/Answers.org::findsomeprimes][findsomeprimes]]][square]]
(define (square x)
  (* x x))
;; square ends here
(define (smallest-divisor n)
  (find-divisor n 2))

(define (next n)
  (if (= n 2)
      3
      (+ n 2)))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) 
         n)
        ((divides? test-divisor n) 
         test-divisor)
        (else (find-divisor 
               n 
               (next test-divisor)))))

(define (divides? a b)
  (= (remainder b a) 0))
;; find-divisor-faster-real ends here
(define (prime? n)
  (= n (smallest-divisor n)))
(call-with-output-file "Data/primes-1k_to_1mil.txt" (Î»(port)
  (write (filter prime? (iota (- 1000000 1000) 1000))
         port)))
;; findsomeprimes ends here
